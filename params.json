{
  "name": "Snowpack",
  "tagline": "Webpack your snowplow",
  "body": "# Snowpack\r\n\r\n> [Webpack](http://webpack.github.io/) your [Snowplow](http://snowplowanalytics.com/) JS tracking.\r\n\r\nWhile the official snowplow documentation [recommends setting up their JS tracker via Google Tag Manager](https://github.com/snowplow/snowplow/wiki/Integrating-javascript-tags-with-Google-Tag-Manager), if you have tons of tags and dependencies on your website this will significantly increase the delay between the moment when a user lands on one of your pages and the moment when events are sent.\r\n\r\nThere are workarounds to this (such as [using `localStorage` to store events that haven't been sent](https://github.com/snowplow/snowplow/wiki/1-General-parameters-for-the-Javascript-tracker#2213-configuring-localstorage)), but tackling the issue at its root may be a good idea.\r\n\r\nSnowpack tries to answer this problem by providing an efficient way of integrating a small (around 10 kB with one tracker setup) script to your pages that will instanciate trackers as fast as possible.\r\n\r\nIt also includes some goodies such as:\r\n  * ES6 [Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) objects so you can get the magic going (yes, they are polyfilled).\r\n  * Minified, Uglified script once built so you don't overuse your user's bandwidth.\r\n  * Cool names: admit it, writing `window.addEventListener('winterIsComing', /* tracking stuff */);` is fun.\r\n   \r\nRight now, you can only define trackers with Snowpack, but one day you will be able to do things like (contributions welcome):\r\n  * Track simple events (pageview, structured events) with contexts.\r\n  * Even more ES6 goodness: `window.makeItSnow().then((snow) => { snow.trackPageView( /* */ )}).catch((ice) => { console.warn(ice) })` looks good, right?\r\n \r\n## Prerequisites\r\n\r\nCreate the `src/lib/secure/trackers.json` file. Add your tracker definition like the following:\r\n\r\n```` json\r\n[\r\n  {\r\n    \"trackerName\": \"greatTracker\",\r\n    \"collectorHostname\": \"my.collector.com\",\r\n    \"options\": {\r\n      \"appId\": \"myApp\",\r\n      \"encodeBase64\": true,\r\n      \"cookieDomainRemove\": \"stringToRemovefromHostname\",\r\n      \"contexts\": {\r\n        \"optimizelyStates\": true,\r\n        \"webPage\": true,\r\n        \"performanceTiming\": true\r\n      }\r\n    }\r\n  }\r\n]\r\n\r\n````\r\n\r\n  * If you omit `options.appId`, it will be set to your domain, stripped from any `www.` and with `.` changed to `-` (eg. `www.google.com` will become `google-com`).\r\n  * You can either specify a `cookieDomain` option or not. If you omit it, it will be set to the hostname without `www.`. You can also specify a `cookieDomainRemove` string that will be removed from the hostname (eg. `finance.google.com` will become `google.com` if you set this option to `finance.`).\r\n\r\n## Run devserver\r\n\r\n`docker-compose up`\r\n\r\nOpen `<your-docker-ip>:8080`.\r\n\r\nOpen up [`src/index.html`](src/index.html) to understand what's happening.\r\n\r\n## Build\r\n\r\n`./scripts/build.sh`\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}